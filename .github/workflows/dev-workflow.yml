name: Dev deploy

on:
  push:
    branches:
      - dev

env:
  CARGO_TERM_COLOR: always

jobs:
  main-ui:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main

      - name: Install dioxus-cli
        run: |
          cargo binstall dioxus-cli --force
          cargo binstall toml-cli --force

      - name: Cache builder
        id: main-ui-build-cache
        uses: actions/cache@v3
        with:
          key: main-ui-build-cache
          path: |
            target

      - name: Checking violate
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SERVICE: main-ui
        run: |
          dx check -p $SERVICE

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          RUST_LOG: debug
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FIREBASE_API_KEY: "${{ secrets.FIREBASE_API_KEY }}"
          FIREBASE_AUTH_DOMAIN: "${{ secrets.FIREBASE_AUTH_DOMAIN }}"
          FIREBASE_PROJECT_ID: "${{ secrets.FIREBASE_PROJECT_ID }}"
          FIREBASE_STORAGE_BUCKET: "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
          FIREBASE_MESSAGING_SENDER_ID: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
          FIREBASE_APP_ID: "${{ secrets.FIREBASE_APP_ID }}"
          FIREBASE_MEASUREMENT_ID: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          OWNER_KEY: ${{ secrets.DEV_KLAYTN_FEEPAYER_KEY }}
          FEEPAYER_ADDRESS: ${{ secrets.DEV_KLAYTN_FEEPAYER_ADDR }}

          MAIN_API_ENDPOINT: https://dev-api.incheon.world
          NEW_API_ENDPOINT: https://api.dev.incheonheroes.world
          DISCORD_API_ENDPOINT: https://dev-discord-api.incheon.world
          LOGS_API_ENDPOINT: https://dev-logs-api.incheon.world
          NFT_BASE_URI: https://metadata.biyard.co/incheon-heroes/json

          ENV: dev
          SERVICE: main-ui
          DOMAIN: dev.incheonheroes.world
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: https://dev.incheonheroes.world/oauth/kakao
          ICP_CANISTER_ID: mkam6-f4aaa-aaaaa-qablq-cai
          ICP_ENDPOINT: https://rdmx6-jaaaa-aaaaa-aaadq-cai.icp.biyard.co

          KLAYTN_ENDPOINT: https://public-en-kairos.node.kaia.io
          CONTRACT_SHOP: "0xd1C122aBCa35B5187CccF98FEb1ddF46E3db5367"
          CONTRACT_HOLDER: "0xCeE4aAaD519D03D92C31402ea4dA5A0e7CA6b9D4"
          CONTRACT_SBT: "0xA7655552f1E170A2B2C4193E0a567908fb3a38B9"
          CONTRACT_EXPERIENCE: "0x24e9B346D95Af3220A1022861a1A3ce936B5D6C2"
          CONTRACT_NFT: "0x7F3A142E8bbb68098159ff5Ff6557c6C99325B8b"
          CONTRACT_MISSION: "0x70ADA463d16F52ade7C3D03E1864c7B89061B01f"
          CONTRACT_INCHEON_CONTENTS: "0x54a01cd46b7f585584Fe4a3F7dafC25EE1fac0c9"

          OPENSEA_ENDPOINT: "https://testnets.opensea.io/assets/baobab"

          API_PREFIX: /api
          ENABLE_S3: true
          ENABLE_FARGATE: false
          ENABLE_DYNAMO: false
          ENABLE_LAMBDA: true
        run: |
          npm i -g aws-cdk @tailwindcss/cli
          make deploy-web

  main-api:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main

      - name: Cache builder
        id: main-ui-build-cache
        uses: actions/cache@v3
        with:
          key: main-api-build-cache
          path: |
            packages/main-api/target

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BASE_DOMAIN: incheonheroes.world
          ENV: dev
          RUST_LOG: debug
          SERVICE: main-api
          DOMAIN: api.dev.incheonheroes.world
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET }}

          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}

          KLAYTN_FEEPAYER_KEY: ${{ secrets.DEV_KLAYTN_FEEPAYER_KEY }}
          KLAYTN_FEEPAYER_ADDR: ${{ secrets.DEV_KLAYTN_FEEPAYER_ADDR }}
          KLAYTN_OWNER_KEY: ${{ secrets.DEV_KLAYTN_FEEPAYER_KEY }}
          KLAYTN_OWNER_ADDR: ${{ secrets.DEV_KLAYTN_FEEPAYER_KEY_ADDR }}
          KLAYTN_ENDPOINT: https://public-en-kairos.node.kaia.io
          CONTRACT_INCHEON_CONTENTS: "0x54a01cd46b7f585584Fe4a3F7dafC25EE1fac0c9"

          ENABLE_S3: false
          ENABLE_LAMBDA: true
        run: |
          npm i -g aws-cdk
          make deploy

  create-release-pr:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs:
      [main-ui,main-api]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - name: Git pr release action
        uses: grassedge/git-pr-release-action@v1.0
        with:
          base: main
          head: dev
          token: ${{ secrets.GITHUB_TOKEN }}
